(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["react-container-component"] = factory(require("react"));
	else
		root["react-container-component"] = factory(root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.createFakeComponent = exports.Context = exports.Container = undefined;

	var _Container = __webpack_require__(3);

	var _Container2 = _interopRequireDefault(_Container);

	var _Context = __webpack_require__(4);

	var _Context2 = _interopRequireDefault(_Context);

	var _propUtils = __webpack_require__(1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	exports.Container = _Container2["default"];
	exports.Context = _Context2["default"];
	exports.createFakeComponent = _propUtils.createFakeComponent;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports.logWarning = exports.mapPropTypesToProps = exports.reduceProps = exports.createFakeComponent = undefined;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	// This component is for test doubles, that's why we return a "dummy" <i></i>
	var createFakeComponent = exports.createFakeComponent = function createFakeComponent(hook) {
	  return function (props) {
	    var keys = Object.keys(props);
	    for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var value = _ref;

	      hook[value] = props[value];
	    }
	    return _react2["default"].createElement('i', null);
	  };
	};

	var reduceProps = exports.reduceProps = function reduceProps(props) {
	  return Object.keys(props).reduce(function (reducedProps, propKey) {
	    if (propKey !== 'children') {
	      reducedProps[propKey] = props[propKey];
	    }
	    return reducedProps;
	  }, {});
	};

	var mapPropTypesToProps = exports.mapPropTypesToProps = function mapPropTypesToProps(props) {
	  var reducedProps = reduceProps(props);
	  var propTypes = {};
	  for (var key in reducedProps) {
	    // https://facebook.github.io/react/warnings/dont-call-proptypes.html
	    propTypes[key] = function () {};
	  }
	  return propTypes;
	};

	var logWarning = exports.logWarning = function logWarning(message) {
	  var warning = 'Warning: ' + message;
	  if (console.error) {
	    console.error(warning);
	  } else {
	    console.log(warning);
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propUtils = __webpack_require__(1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Container = function (_React$Component) {
	  _inherits(Container, _React$Component);

	  function Container() {
	    _classCallCheck(this, Container);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  // This is the component that my container is going to render
	  Container.prototype.setComponent = function setComponent(component) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    this.childComponent = component;
	    this.options = options;
	    var propTypes = component.propTypes || options.propTypes;

	    // when you inject dinamically a different child component using props and
	    // you want to add propTypes that are not set at design time in the child component
	    if (options.props && options.props._component && typeof options.props._component.propTypes) {
	      propTypes = Object.assign({}, propTypes, options.props._component.propTypes);
	    }

	    if (typeof process !== "undefined" && ("development") !== 'production') {
	      if (!propTypes) {
	        (0, _propUtils.logWarning)('You are rendering ' + (component.name || 'a component') + ' that has no propTypes. PropTypes are used by the Container\n        to set the props the container will pass to the child component. If ' + (component.name || 'your component') + ' doesn\'t use any props then ignore this warning');
	      }
	    }

	    // options.addProps are props that you want to explicitly inject to the container's child component.
	    // This is not needed if you name the methods or the this.state keys that you want to pass down with the same name as the child component's propTypes.
	    // options.addProps is not needed for properties that are injected already in the container, for instance
	    // by other functions like react-redux connect function. In most cases you don't have to use options.addProps
	    var addProps = options.addProps || {};

	    var src = 'return {';
	    for (var key in propTypes) {
	      var addProp = addProps[key];
	      if (addProp && typeof addProp === 'string') {
	        src += key + ': ' + addProp + ',';
	      } else if (addProp) {
	        (0, _propUtils.logWarning)('{ addProps: {' + key + '} must be a string, example: \'this.state.user.id\'');
	      } else {
	        src += key + ': this[\'' + key + '\'] || props[\'' + key + '\'] || (this.state && this.state[\'' + key + '\']),';
	      }
	    }

	    if (propTypes) {
	      src = src.slice(0, -1);
	    }
	    src += '}';
	    this.getChildProps = Function('props', src);

	    if (options.props && options.props._methods) {
	      for (var _key in options.props._methods) {
	        var injectMethod = options.props._methods[_key];
	        if (this.hasOwnProperty(_key) && typeof this[_key] === 'function' && typeof injectMethod === 'function') {
	          this[_key] = injectMethod;
	        }
	      }
	    }
	  };

	  Container.prototype.render = function render() {
	    // The component that will be rendered can be set in two different ways:
	    // 1. Via Container's props, example <ChatContainer component="MockChat" />.
	    //    It'll be available in the Container as this.props._component
	    // 2. Via constructor of the component that extends this Container.
	    //    It'll be available as this.childComponent
	    // this.props is checked first to enable dependency injection
	    var ChildComponent = this.props._component || this.childComponent;
	    var children = this.options.disablePropsChildren ? null : this.props.children;
	    return _react2["default"].createElement(ChildComponent, _extends({}, this.getChildProps(this.props), { children: children }));
	  };

	  return Container;
	}(_react2["default"].Component);

	exports["default"] = Container;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _react = __webpack_require__(2);

	var _react2 = _interopRequireDefault(_react);

	var _propUtils = __webpack_require__(1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var DependencyInjector = function (_React$Component) {
	  _inherits(DependencyInjector, _React$Component);

	  function DependencyInjector() {
	    _classCallCheck(this, DependencyInjector);

	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }

	  DependencyInjector.prototype.getChildContext = function getChildContext() {
	    return (0, _propUtils.reduceProps)(this.props);
	  };

	  DependencyInjector.prototype.render = function render() {
	    return this.props.children;
	  };

	  return DependencyInjector;
	}(_react2["default"].Component);

	var Context = function (_React$Component2) {
	  _inherits(Context, _React$Component2);

	  function Context(props) {
	    _classCallCheck(this, Context);

	    var _this2 = _possibleConstructorReturn(this, _React$Component2.call(this, props));

	    DependencyInjector.childContextTypes = (0, _propUtils.mapPropTypesToProps)(props);
	    return _this2;
	  }

	  Context.prototype.render = function render() {
	    return _react2["default"].createElement(DependencyInjector, this.props);
	  };

	  return Context;
	}(_react2["default"].Component);

	exports["default"] = Context;

/***/ },
/* 5 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }
/******/ ])
});
;